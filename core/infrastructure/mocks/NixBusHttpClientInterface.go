// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	infrastructure "github.com/nixbus/event-bus-go/core/infrastructure"
	mock "github.com/stretchr/testify/mock"
)

// NixBusHttpClientInterface is an autogenerated mock type for the NixBusHttpClientInterface type
type NixBusHttpClientInterface struct {
	mock.Mock
}

// FindDeadEvents provides a mock function with given fields: subscriberId
func (_m *NixBusHttpClientInterface) FindDeadEvents(subscriberId string) (*infrastructure.FindEventsResponse, error) {
	ret := _m.Called(subscriberId)

	if len(ret) == 0 {
		panic("no return value specified for FindDeadEvents")
	}

	var r0 *infrastructure.FindEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*infrastructure.FindEventsResponse, error)); ok {
		return rf(subscriberId)
	}
	if rf, ok := ret.Get(0).(func(string) *infrastructure.FindEventsResponse); ok {
		r0 = rf(subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrastructure.FindEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNextEvents provides a mock function with given fields: subscriberId
func (_m *NixBusHttpClientInterface) FindNextEvents(subscriberId string) (*infrastructure.FindEventsResponse, error) {
	ret := _m.Called(subscriberId)

	if len(ret) == 0 {
		panic("no return value specified for FindNextEvents")
	}

	var r0 *infrastructure.FindEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*infrastructure.FindEventsResponse, error)); ok {
		return rf(subscriberId)
	}
	if rf, ok := ret.Get(0).(func(string) *infrastructure.FindEventsResponse); ok {
		r0 = rf(subscriberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrastructure.FindEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(subscriberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscribers provides a mock function with no fields
func (_m *NixBusHttpClientInterface) GetSubscribers() (*infrastructure.SubscribersResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubscribers")
	}

	var r0 *infrastructure.SubscribersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*infrastructure.SubscribersResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *infrastructure.SubscribersResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrastructure.SubscribersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkEventsAsFailed provides a mock function with given fields: events
func (_m *NixBusHttpClientInterface) MarkEventsAsFailed(events []struct {
	Id           string
	SubscriberId string
}) error {
	ret := _m.Called(events)

	if len(ret) == 0 {
		panic("no return value specified for MarkEventsAsFailed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]struct {
		Id           string
		SubscriberId string
	}) error); ok {
		r0 = rf(events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkEventsAsFinished provides a mock function with given fields: events
func (_m *NixBusHttpClientInterface) MarkEventsAsFinished(events []struct {
	Id           string
	SubscriberId string
}) error {
	ret := _m.Called(events)

	if len(ret) == 0 {
		panic("no return value specified for MarkEventsAsFinished")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]struct {
		Id           string
		SubscriberId string
	}) error); ok {
		r0 = rf(events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishEvents provides a mock function with given fields: events
func (_m *NixBusHttpClientInterface) PublishEvents(events []struct {
	Type    string
	Payload map[string]interface{}
}) error {
	ret := _m.Called(events)

	if len(ret) == 0 {
		panic("no return value specified for PublishEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]struct {
		Type    string
		Payload map[string]interface{}
	}) error); ok {
		r0 = rf(events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutSubscriber provides a mock function with given fields: subscriberId, eventType, config
func (_m *NixBusHttpClientInterface) PutSubscriber(subscriberId string, eventType string, config struct {
	MaxRetries  int
	Timeout     int
	Concurrency int
}) error {
	ret := _m.Called(subscriberId, eventType, config)

	if len(ret) == 0 {
		panic("no return value specified for PutSubscriber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, struct {
		MaxRetries  int
		Timeout     int
		Concurrency int
	}) error); ok {
		r0 = rf(subscriberId, eventType, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAllSubscribers provides a mock function with no fields
func (_m *NixBusHttpClientInterface) RemoveAllSubscribers() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllSubscribers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveSubscriber provides a mock function with given fields: eventType, subscriberId
func (_m *NixBusHttpClientInterface) RemoveSubscriber(eventType string, subscriberId string) error {
	ret := _m.Called(eventType, subscriberId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSubscriber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(eventType, subscriberId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNixBusHttpClientInterface creates a new instance of NixBusHttpClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNixBusHttpClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NixBusHttpClientInterface {
	mock := &NixBusHttpClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
